#!/bin/bash

# https://github.com/Parth/dotfiles
prompt_install() {
  echo -n "$1 is not installed. Would you like to install it? (y/n) " >&2
  old_stty_cfg=$(stty -g)
  stty raw -echo
  answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
  stty "$old_stty_cfg" && echo
  if echo "$answer" | grep -iq "^y" ;then
    # This could def use community support
    # Don't use apt, it's also a java util and might detect that
    if [ -x "$(command -v apt-get)" ]; then
      sudo apt-get install "$1" -y

    elif [ -x "$(command -v brew)" ]; then
      brew install "$1"

    elif [ -x "$(command -v pkg)" ]; then
      sudo pkg install "$1"

    elif [ -x "$(command -v pacman)" ]; then
      sudo pacman -S "$1"

    else
      echo "I'm not sure what your package manager is! Please install $1 on
      your own and run this deploy script again. Tests for package managers are
      in the deploy script you just ran starting at line 13. Feel free to make
      a pull request at https://github.com/parth/dotfiles :)"
    fi
  fi
}

check_for_software() {
  echo "Checking to see if $1 is installed"
  command=${2-"$1"}
  if ! [ -x "$(command -v "$command")" ]; then
    prompt_install "$1"
  else
    echo "$1 is installed."
  fi
}

check_default_shell() {
  if [ -z "${SHELL##*zsh*}" ] ;then
    echo "Default shell is zsh."
  else
    echo -n "Default shell is not zsh. Do you want to chsh -s \$(which zsh)? (y/n)"
    old_stty_cfg=$(stty -g)
    stty raw -echo
    answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
    stty "$old_stty_cfg" && echo
    if echo "$answer" | grep -iq "^y" ;then
      chsh -s "$(which zsh)"
    else
      echo "Warning: Your configuration won't work properly. If you exec zsh,
      it'll exec tmux which will exec your default shell which isn't zsh."
    fi
  fi
}

echo "We're going to do the following:"
echo "1. Check to make sure you have zsh, vim, and tmux installed"
echo "2. We'll help you install them if you don't"
echo "3. We're going to check to see if your default shell is zsh"
echo "4. We'll try to change it if it's not"

echo "Let's get started? (y/n)"
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty "$old_stty_cfg"
if echo "$answer" | grep -iq "^y" ;then
  echo
else
  echo "Quitting, nothing was changed."
  exit 0
fi


check_for_software zsh
echo
check_for_software vim
echo
check_for_software neovim, nvim
echo
check_for_software tmux
echo

check_default_shell

echo
echo -n "Would you like to backup your current dotfiles? (y/n) "
old_stty_cfg=$(stty -g)
stty raw -echo
answer=$( while ! head -c 1 | grep -i '[ny]' ;do true ;done )
stty "$old_stty_cfg"
if echo "$answer" | grep -iq "^y" ;then
  mv "$HOME/.aliases" "$HOME/.aliases.old"
  mv "$HOME/.exports" "$HOME/.exports.old"
  mv "$HOME/.profile" "$HOME/.profile.old"
  mv "$HOME/.gitconfig" "$HOME/.gitconfig.old"

  mv "$HOME/.zshrc" "$HOME/.zshrc.old"
  mv "$HOME/.tmux.conf" "$HOME/.tmux.conf.old"
  mv "$HOME/.vimrc" "$HOME/.vimrc.old"
  mv "$HOME/.config/nvim/init.vim" "$HOME/.config/nvim/init.vim.old"
else
  echo -e "\nNot backing up old dotfiles."
fi

# Ensure directory exists
mkdir -p .config/nvim
ln -s "$HOME/dotfiles/nvim/lua" "$XDG_CONFIG_HOME/nvim/lua"

# Create dot files to reference our dotfiles
echo "source $HOME/dotfiles/aliases" > "$HOME/.aliases"
echo "source $HOME/dotfiles/exports" > "$HOME/.exports"
echo "source $HOME/dotfiles/profile" > "$HOME/.profile"
printf "[include]\n  path=%s/dotfiles/gitconfig\n" "$HOME" > "$HOME/.gitconfig"
printf "#include dotfiles/Xresources\n" > "$HOME/.Xresources"

echo "source $HOME/dotfiles/zsh/zshrc" > "$HOME/.zshrc"
echo "source $HOME/dotfiles/zsh/zshenv" > "$HOME/.zshenv"
echo "so $HOME/dotfiles/vim/vimrc" > "$HOME/.vimrc"
echo "source-file $HOME/dotfiles/tmux/tmux.conf" > "$HOME/.tmux.conf"
echo "so $HOME/dotfiles/nvim/init.lua" > "$XDG_CONFIG_HOME/nvim/init.lua"

echo
echo "Linking in other files"
ln -s "$HOME/dotfiles/plan" "$HOME/.plan"

echo
echo "Please log out and log back in for default shell to be initialized."
